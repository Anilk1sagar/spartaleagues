{"version":3,"sources":["../src/spartaleagues_backend.js"],"names":["console","log","path","join","__dirname","result","Config","isProduction","dotenv","config","process","env","NODE_ENV","dotenvSafe","load","allowEmptyValues","parsed","API_PORT","server","ConfigBase","configure","then","app","http","createServer","listen","apiPort","catch","error","__logErrorAndExit","message","err","logger","debug","setTimeout","exit"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAGA;AACAA,QAAQC,GAAR,CAAYC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,MAArB,CAAZ;;AAEA,IAAIC,SAAS,EAAb;;AAEA,IAAGC,iBAAOC,YAAP,EAAH,EAA0B;AACtBF,aAASG,iBAAOC,MAAP,CAAc,EAACP,MAAM,iBAAP,EAAd,CAAT;AACAF,YAAQC,GAAR,CAAY,iCAAZ,EAA+CS,QAAQC,GAAR,CAAYC,QAA3D,EAAqE,MAArE;AACH,CAHD,MAGO;AACHP,aAASG,iBAAOC,MAAP,CAAc,EAACP,MAAM,MAAP,EAAd,CAAT;AACAF,YAAQC,GAAR,CAAY,iCAAZ,EAA+CS,QAAQC,GAAR,CAAYC,QAA3D,EAAqE,MAArE;AACH;;AAEDC,qBAAWC,IAAX,CAAgB,EAACC,kBAAkB,IAAnB,EAAhB;AACAf,QAAQC,GAAR,CAAYI,OAAOW,MAAnB;;AAIA;AACAhB,QAAQC,GAAR,CAAYS,QAAQC,GAAR,CAAYM,QAAxB;;AAEA,IAAIC,SAAS,EAAb;;AAEA;;AAEAC,qBAAWC,SAAX,GAAuBC,IAAvB,CAA6BC,GAAD,IAAS;AACjC;AACAJ,aAASK,eAAKC,YAAL,CAAkBF,GAAlB,CAAT;;AAEAJ,WAAOO,MAAP,CAAcnB,iBAAOoB,OAAP,EAAd,EAAgC,YAAY;AACxC1B,gBAAQC,GAAR,CAAY,eAAZ,EAA6BK,iBAAOoB,OAAP,EAA7B;AACH,KAFD;AAGH,CAPD,EAOGC,KAPH,CAOUC,KAAD,IAAW;AAChBC,sBAAkB,iBAAlB,EAAqCD,KAArC;AACH,CATD;;AAmBA;AACA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,GAApC,EAAyC;AACrC/B,YAAQC,GAAR,CAAY,YAAZ,EAA0B6B,OAA1B;AACA9B,YAAQC,GAAR,CAAY,UAAZ,EAAwB8B,GAAxB;AACAC,qBAAOC,KAAP,CAAa,6BAAb,EAA4CF,GAA5C;AACAG,eAAW,YAAY;AACnBxB,gBAAQyB,IAAR;AACH,KAFD,EAEG,IAFH;AAGH","file":"spartaleagues_backend.js","sourcesContent":["import http from \"http\";\r\nimport path from 'path';\r\nimport logger from './utils/logger';\r\n\r\nimport ConfigBase from './initials/configBase';\r\nimport Config from './config';\r\n\r\nimport dotenv from \"dotenv\";\r\nimport dotenvSafe from \"dotenv-safe\";\r\n\r\n\r\n//Environment Directory\r\nconsole.log(path.join(__dirname, '.env'));\r\n\r\nlet result = {};\r\n\r\nif(Config.isProduction()) {\r\n    result = dotenv.config({path: '.env.production'});\r\n    console.log(\"Node Environment is running on:\", process.env.NODE_ENV, \"Mode\");\r\n} else {\r\n    result = dotenv.config({path: '.env'});\r\n    console.log(\"Node Environment is running on:\", process.env.NODE_ENV, \"Mode\");\r\n}\r\n\r\ndotenvSafe.load({allowEmptyValues: true});\r\nconsole.log(result.parsed);\r\n\r\n\r\n\r\n// ====================== Server Configurations =====================//\r\nconsole.log(process.env.API_PORT);\r\n\r\nlet server = {};\r\n\r\n// Start Server\r\n\r\nConfigBase.configure().then((app) => {\r\n    //console.log(app);\r\n    server = http.createServer(app);\r\n\r\n    server.listen(Config.apiPort(), function () {\r\n        console.log(\"Listening on \", Config.apiPort());\r\n    });\r\n}).catch((error) => {\r\n    __logErrorAndExit(\"unable to start\", error);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Logger Error Function\r\nfunction __logErrorAndExit(message, err) {\r\n    console.log(\"message|| \", message);\r\n    console.log(\"error|| \", err);\r\n    logger.debug(\" error __logErrorAndExit {}\", err);\r\n    setTimeout(function () {\r\n        process.exit();\r\n    }, 3000);\r\n}"]}