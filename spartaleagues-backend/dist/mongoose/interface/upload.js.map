{"version":3,"sources":["../../../src/mongoose/interface/upload.js"],"names":["app","add","Model","promise","Promise","resolve","reject","console","log","save","err","obj","logger","error","callback"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;AAGA;;;;;;;kBAQgBA,GAAD,IAAS;;AAEpB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAKA;;;;AAIA,QAAIC,MAAM,MAAOC,KAAP,IAAiB;;AAEvB,YAAIC,UAAU,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAE3CC,oBAAQC,GAAR,CAAY,aAAZ,EAA2BN,KAA3B;;AAEA,gBAAI;;AAEA;AACAA,sBAAMO,IAAN,CAAW,CAACC,GAAD,EAAMC,GAAN,KAAa;;AAEpB,wBAAID,GAAJ,EAAS,MAAMA,GAAN;;AAET,wBAAGC,GAAH,EAAQ;AACJN,gCAAQM,GAAR;AAEH,qBAHD,MAGO;AACHN,gCAAQ,IAAR;AACH;AACJ,iBAVD;AAYH,aAfD,CAeE,OAAOK,GAAP,EAAY;;AAEVE,iCAAOC,KAAP,CAAa,wBAAb,EAAuCH,GAAvC;AACA,sBAAMA,GAAN;AACH;AAEJ,SAzBa,CAAd;;AA4BA,YAAII,WAAW,MAAMX,OAArB;AACAI,gBAAQC,GAAR,CAAY,uBAAZ,EAAqCM,QAArC;AACA,eAAOA,QAAP;AAEH,KAlCD;;AAsCA,WAAO;AACH;AACAb,aAAKA;AACL;AAHG,KAAP;AAMH,C","file":"upload.js","sourcesContent":["import _ from 'lodash';\r\nimport logger from \"./../../utils/logger\";\r\n\r\nimport Express from 'express';\r\nimport { Model } from 'mongoose';\r\n\r\n//import User from './../../mongoose/models/user';\r\n\r\n\r\n/**\r\n * Queries a Baz for items.\r\n * @param {Express} app Subgroup id to query.\r\n * @param {MongooseDb} mongooseDb ,\r\n *     or itemId, or null to search everything.\r\n */\r\n\r\n\r\nexport default (app) => {\r\n\r\n    //let interfaceDbModel_User = User;\r\n\r\n\r\n    // /**\r\n    //  * \r\n    //  * @param {Model} Model\r\n    //  * @param {string} pKey\r\n    //  * @param {string} value\r\n    //  */\r\n    // let find = async (Model, query, value) => {\r\n\r\n    //     console.log(\"Interface: \", Model, ' , ', query, ' , ', value);\r\n        \r\n    //     let promise = new Promise((resolve, reject) => {\r\n\r\n    //         try {\r\n\r\n    //             console.log({ query: value });\r\n                \r\n    //             Model.findOne({ \"query\": value }, (err, result)=> {\r\n                    \r\n    //                 if (err) return res.status(500).send(\"There was a problem finding \", query);\r\n                    \r\n    //                 if(result) {\r\n    //                     resolve(result);\r\n    //                 } else {\r\n    //                     resolve(null);\r\n    //                 }\r\n    //             });\r\n\r\n    //         } catch (err) {\r\n\r\n    //             logger.error(\"error in UploadCtrl.find {}\", err);\r\n    //             throw err;\r\n    //         }\r\n\r\n    //     });\r\n\r\n    //     let callback = await promise;\r\n    //     console.log(\"callback upload find: \", callback);\r\n    //     return callback;\r\n\r\n    // }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {Model} Model \r\n     */\r\n    let add = async (Model) => {\r\n\r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            console.log(\"Interface: \", Model);\r\n\r\n            try {\r\n\r\n                //Add user in Database\r\n                Model.save((err, obj) =>{\r\n\r\n                    if (err) throw err;\r\n\r\n                    if(obj) {\r\n                        resolve(obj);\r\n\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                });\r\n\r\n            } catch (err) {\r\n\r\n                logger.error(\"error in Upload.add {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n        \r\n        let callback = await promise;\r\n        console.log(\"callback Add upload: \", callback);\r\n        return callback;\r\n\r\n    };\r\n\r\n\r\n\r\n    return {\r\n        //find: find,\r\n        add: add,\r\n        //get: get\r\n    };\r\n\r\n}"]}