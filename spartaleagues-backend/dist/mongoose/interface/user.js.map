{"version":3,"sources":["../../../src/mongoose/interface/user.js"],"names":["app","interfaceDbModel_User","User","interfaceDbModel_Puser","ParticipantUser","getUserById","id","promise","Promise","resolve","reject","console","log","findById","password","err","user","logger","error","callback","getUserByUsername","pUsername","findOne","getUserByEmail","pEmail","addUser","pUser","bcrypt","genSalt","salt","hash","save","_","pick","comparePassword","candidatePassword","compare","isMatch","updateUser","pId","userModel","name","username","city","phone","gameRank","toString","toLowerCase","steamProfile","imgLink","coverImgLink","email","undefined","findByIdAndUpdate","_id","searchUser","pGameRank","find","$regex","$options","exec","users","getParticipantUser"],"mappings":"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","file":"user.js","sourcesContent":["import _ from 'lodash';\r\nimport logger from \"./../../utils/logger\";\r\n\r\nimport Express from 'express';\r\nimport bcrypt from 'bcryptjs';\r\n\r\n// const User = require('./../../mongoose/models/user');\r\n// const ParticipantUser = require('./../../mongoose/models/participantsUser');\r\n\r\nimport User from './../../mongoose/models/user';\r\nimport ParticipantUser from './../../mongoose/models/participantsUser';\r\n\r\n\r\n/**\r\n * Queries a Baz for items.\r\n * @param {Express} app Subgroup id to query.\r\n * @param {MongooseDb} mongooseDb ,\r\n *     or itemId, or null to search everything.\r\n */\r\n\r\n\r\nexport default (app) => {\r\n\r\n    let interfaceDbModel_User = User;\r\n    let interfaceDbModel_Puser = ParticipantUser\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {string} id \r\n     */\r\n    let getUserById = async (id) => {\r\n\r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            console.log(\"Interface-Get User By Id: \", id);\r\n\r\n            try {\r\n\r\n                interfaceDbModel_User.findById(id, { password: 0 }, (err, user)=> {\r\n                    \r\n                    if (err) throw err;\r\n                    \r\n                    if(user) {\r\n                        resolve(user);\r\n                        //resolve(_.pick(user, ['_id', 'name', 'email', 'imgLink']));\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                });\r\n    \r\n            } catch (err) {\r\n    \r\n                logger.error(\"error in UserCtrl.getById {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n        \r\n\r\n        let callback = await promise;\r\n        console.log(\"callback Get User By Id: \", callback);\r\n        return callback;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {string} pUsername \r\n     */\r\n    /* Get User By Email */\r\n    let getUserByUsername = async (pUsername) => {\r\n        \r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            try {\r\n\r\n                console.log(\"Interface: \", pUsername);\r\n\r\n                interfaceDbModel_User.findOne({'username': pUsername}, { password: 0 }, (err, user)=> {\r\n                    \r\n                    if (err) throw err;\r\n                    \r\n                    if(user) {\r\n                        resolve(user);\r\n                        //resolve(_.pick(user, ['_id', 'name', 'email', 'imgLink']));\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                });\r\n\r\n            } catch (err) {\r\n\r\n                logger.error(\"error in UserCtrl.getUserByUsername {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n        let callback = await promise;\r\n        console.log(\"callback Search User By Username: \", callback);\r\n        return callback;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {string} pEmail \r\n     */\r\n    /* Get User By Email */\r\n    let getUserByEmail = async (pEmail) => {\r\n        \r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            try {\r\n\r\n                console.log(\"Interface: \", pEmail);\r\n\r\n                interfaceDbModel_User.findOne({'email': pEmail}, (err, user)=> {\r\n\r\n                    console.log(user);\r\n                    \r\n                    if (err) throw err;\r\n                    \r\n                    if(user) {\r\n                        resolve(user);\r\n                        //resolve(_.pick(user, ['_id', 'name', 'email', 'imgLink']));\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                });\r\n\r\n            } catch (err) {\r\n\r\n                logger.error(\"error in UserCtrl.getUserByEmail {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n        let callback = await promise;\r\n        console.log(\"callback Search User By Email: \", callback);\r\n        return callback;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {User} pUser \r\n     */\r\n    let addUser = async (pUser) => {\r\n\r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            console.log(\"Interface: \", pUser);\r\n\r\n            try {\r\n\r\n                bcrypt.genSalt(10, (err, salt) => {\r\n                    bcrypt.hash(pUser.password, salt, (err, hash) => {\r\n\r\n                        if(err) throw err;\r\n\r\n                        pUser.password = hash;\r\n\r\n                        //Add user in Database\r\n                        pUser.save((err, user) =>{\r\n\r\n                            if (err) throw err;\r\n\r\n                            if(user) {\r\n                                //console.log(user);\r\n                                resolve(_.pick(user, ['_id', 'name', 'email', 'imgLink']));\r\n\r\n                            } else {\r\n                                resolve(null);\r\n                            }\r\n                        });\r\n\r\n                    });\r\n                });\r\n\r\n            } catch (err) {\r\n\r\n                logger.error(\"error in user.add {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n        \r\n        let callback = await promise;\r\n        console.log(\"callback Add User: \", callback);\r\n        return callback;\r\n\r\n    };\r\n\r\n\r\n    \r\n    /**\r\n     * \r\n     * @param {User} pUser \r\n     */\r\n    let comparePassword = async (candidatePassword, hash) => {\r\n\r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            try {\r\n\r\n                bcrypt.compare(candidatePassword, hash, (err, isMatch) => {\r\n\r\n                    if (err) throw err;\r\n\r\n                    resolve(isMatch);\r\n                   // callback(null, isMatch);\r\n                });\r\n\r\n            } catch (err) {\r\n\r\n                logger.error(\"error in user.comparePassword {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n        \r\n        let callback = await promise;\r\n        console.log(\"callback User compare passowrd: \", callback);\r\n        return callback;\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {User} pUser\r\n     * @param {string} pId\r\n     */\r\n    let updateUser = async (pUser, pId) => {\r\n\r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            let userModel = {};\r\n\r\n            if(pUser.name) {\r\n                userModel.name = pUser.name\r\n            }\r\n            if(pUser.username) {\r\n                userModel.username = pUser.username\r\n            }\r\n            if(pUser.city) {\r\n                userModel.city = pUser.city\r\n            }\r\n            if(pUser.phone) {\r\n                userModel.phone = pUser.phone\r\n            }\r\n            if(pUser.gameRank) {\r\n                userModel.gameRank = pUser.gameRank.toString().toLowerCase()\r\n            }\r\n            if(pUser.steamProfile) {\r\n                userModel.steamProfile = pUser.steamProfile\r\n            }\r\n            if(pUser.imgLink) {\r\n                userModel.imgLink = pUser.imgLink\r\n            }\r\n            if(pUser.coverImgLink) {\r\n                userModel.coverImgLink = pUser.coverImgLink\r\n            }\r\n            if(pUser.email) {\r\n                userModel.email = pUser.email.toString().toLowerCase()\r\n            }\r\n            if(pUser.password) {\r\n                userModel.password = pUser.password\r\n            }\r\n\r\n            try {\r\n\r\n                if(userModel.password != undefined) {\r\n\r\n                    console.log(\"Interface User : Updating User Password\");\r\n\r\n                    bcrypt.genSalt(10, (err, salt) => {\r\n                        bcrypt.hash(userModel.password, salt, (err, hash) => {\r\n                            if(err) throw err;\r\n                            userModel.password = hash;\r\n                            //Add user in Database\r\n                            interfaceDbModel_User.findByIdAndUpdate({_id: pId}, userModel, (err, user) => {\r\n\r\n                                if (err) throw err;\r\n\r\n                                if(user) {\r\n                                    resolve(user);\r\n                                } else {\r\n                                    resolve(null);\r\n                                }\r\n                            });\r\n                        });\r\n                    });\r\n\r\n                } else {\r\n\r\n                    console.log(\"Interface User : Updating User\");\r\n\r\n                    interfaceDbModel_User.findByIdAndUpdate({_id: pId}, userModel, (err, user) => {\r\n\r\n                        if (err) throw err;\r\n\r\n                        if(user) {\r\n                            resolve(user);\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n            } catch (err) {\r\n\r\n                logger.error(\"error in user.updateUser {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n        \r\n        let callback = await promise;\r\n        console.log(\"callback Update User: \", callback);\r\n        return callback;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {string} pGameRank\r\n     */\r\n    let searchUser = async (pGameRank) => {\r\n\r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            try {\r\n\r\n                interfaceDbModel_User.find({gameRank: {$regex: pGameRank, $options: 'i'}}).exec((err, users)=> {\r\n\r\n                    if (err) throw err;\r\n\r\n                    if(users) {\r\n                        resolve(users);\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                });\r\n\r\n\r\n\r\n            } catch (err) {\r\n\r\n                logger.error(\"error in user.searchUser {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n        \r\n        let callback = await promise;\r\n        console.log(\"callback User Search Users: \", callback);\r\n        return callback;\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {string} pEmail\r\n     */\r\n    let getParticipantUser = async (pEmail) => {\r\n\r\n        let promise = new Promise((resolve, reject) => {\r\n\r\n            try {\r\n\r\n                interfaceDbModel_Puser.find({'emails': pEmail}, (err, user) => {\r\n\r\n                    if (err) throw err;\r\n\r\n                    if(user) {\r\n                        resolve(user);\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                });\r\n\r\n\r\n\r\n            } catch (err) {\r\n\r\n                logger.error(\"error in user.searchUser {}\", err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n        \r\n        let callback = await promise;\r\n        console.log(\"callback User Search Users: \", callback);\r\n        return callback;\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    return {\r\n        getUserById: getUserById,\r\n        getUserByUsername: getUserByUsername,\r\n        getUserByEmail: getUserByEmail,\r\n        addUser: addUser,\r\n        comparePassword: comparePassword,\r\n        updateUser: updateUser,\r\n        searchUser: searchUser,\r\n        getParticipantUser: getParticipantUser\r\n    };\r\n\r\n}"]}