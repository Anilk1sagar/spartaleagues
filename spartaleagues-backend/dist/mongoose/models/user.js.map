{"version":3,"sources":["../../../src/mongoose/models/user.js"],"names":["UserSchema","mongoose","Schema","name","type","String","required","username","city","default","phone","Number","gameRank","steamProfile","imgLink","coverImgLink","email","password","User","module","exports","model"],"mappings":";;AACA;;;;AACA;;;;;;AACA;;AAEA;AALA;AAMI,MAAMA,aAAaC,mBAASC,MAAT,CAAgB;AAC/BC,UAAM;AACFC,cAAMC,MADJ;AAEFC,kBAAU;AAFR,KADyB;AAK/BC,cAAU;AACNH,cAAMC,MADA;AAENC,kBAAU;AAFJ,KALqB;AAS/BE,UAAM;AACFJ,cAAMC,MADJ;AAEFI,iBAAS;AAFP,KATyB;;AAc/BC,WAAO;AACHN,cAAMO,MADH;AAEHF,iBAAS;AAFN,KAdwB;;AAmB/BG,cAAU;AACNR,cAAMC,MADA;AAENI,iBAAS;AAFH,KAnBqB;;AAwB/BI,kBAAc;AACVT,cAAMC,MADI;AAEVI,iBAAS;AAFC,KAxBiB;;AA6B/BK,aAAS;AACLV,cAAMC,MADD;AAELI,iBAAS;AAFJ,KA7BsB;AAiC/BM,kBAAc;AACVX,cAAMC,MADI;AAEVI,iBAAS;AAFC,KAjCiB;;AAsC/BO,WAAO;AACHZ,cAAMC,MADH;AAEHC,kBAAU;AAFP,KAtCwB;AA0C/BW,cAAU;AACNb,cAAMC,MADA;AAENC,kBAAU;AAFJ;AA1CqB,CAAhB,CAAnB;;AAgDJ,MAAMY,OAAOC,OAAOC,OAAP,GAAiBnB,mBAASoB,KAAT,CAAe,MAAf,EAAuBrB,UAAvB,CAA9B;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"user.js","sourcesContent":["// Requires\r\nimport mongoose from 'mongoose';\r\nimport config  from './../../configDb/database';\r\n//import bcrypt from 'bcryptjs';\r\n\r\n// User Schema\r\n    const UserSchema = mongoose.Schema({\r\n        name: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        username: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        city: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        phone: {\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        gameRank: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        steamProfile: {\r\n            type: String,\r\n            default: null\r\n        },\r\n        \r\n        imgLink: {\r\n            type: String,\r\n            default: null\r\n        },\r\n        coverImgLink: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: true\r\n        }\r\n    });\r\n\r\nconst User = module.exports = mongoose.model('User', UserSchema);\r\n\r\n\r\n\r\n//// Get User By Id\r\n// module.exports.getUserById = function(id, callback) {\r\n//     User.findById(id, callback);\r\n// }\r\n\r\n\r\n// // Get User By teamname\r\n//     module.exports.getUserByEmail = function(email, callback) {\r\n//         const query = {email: email};\r\n//         User.findOne(query, callback);\r\n//     }\r\n\r\n// // Add User In Database\r\n//     module.exports.addUser = function(newUser, callback) {\r\n//         bcrypt.genSalt(10, (err, salt) => {\r\n//             bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n//                 if(err) throw err;\r\n//                 newUser.password = hash;\r\n//                 //Add user in Database\r\n//                 newUser.save(callback);\r\n//             });\r\n//         });\r\n//     }\r\n\r\n// // Update User In Database\r\n// module.exports.updateUser = function(newUser, id, callback) {\r\n//     if(newUser.password !=undefined) {\r\n//         bcrypt.genSalt(10, (err, salt) => {\r\n//             bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n//                 if(err) throw err;\r\n//                 newUser.password = hash;\r\n//                 //Add user in Database\r\n//                 User.findByIdAndUpdate({_id: id}, newUser, callback);\r\n//             });\r\n//         });\r\n//     } else {\r\n//         User.findByIdAndUpdate({_id: id}, newUser, callback);\r\n//     }\r\n// }\r\n\r\n// // Compare Password For Login\r\n//     module.exports.comparePassword = function(candidatePassword, hash, callback) {\r\n//         bcrypt.compare(candidatePassword, hash, (err, isMatch) => {\r\n//             if(err) throw err;\r\n//             callback(null, isMatch);\r\n//         });\r\n//     }"]}