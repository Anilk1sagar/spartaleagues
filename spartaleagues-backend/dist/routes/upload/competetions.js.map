{"version":3,"sources":["../../../src/routes/upload/competetions.js"],"names":["Competetion","require","app","router","dbMongooseUpload","add","req","res","next","checkBody","isAscii","errors","validationErrors","_","first","errValidation","code","message","msg","competetionName","competetionDescription","competetionGameName","competetionLocation","competetionEntryFees","competetionDate","isDone","body","newCompetetion","name","description","gameName","location","entryFees","date","console","log","findOne","err","competetion","json","success","oCompetetion","status","data","e","getCompetetions","find"],"mappings":"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","file":"competetions.js","sourcesContent":["import Express from 'express';\r\nimport Router from 'express';\r\nimport _ from 'lodash';\r\n\r\nimport { DbMongooseUpload } from './../../mongoose/interface';\r\nconst Competetion = require('../../mongoose/models/competetion');\r\n\r\n\r\nexport default (app) => {\r\n\r\n    let router = Router();\r\n    let dbMongooseUpload = DbMongooseUpload(app);\r\n\r\n    /**\r\n    * \r\n    * @param {Request} req \r\n    * @param {Response} res \r\n    * @param {*} next \r\n    */\r\n\r\n\r\n    /* Add Competetion */\r\n    let add = async (req, res, next) => {\r\n\r\n        req.checkBody('competetionName', 'competetionName is Required').isAscii();\r\n        req.checkBody('competetionGameName', 'competetionGameName is Required').isAscii();\r\n        req.checkBody('competetionLocation', 'competetionLocation is Required').isAscii();\r\n        req.checkBody('competetionDate', 'competetionDate is Required').isAscii();\r\n\r\n        var errors = req.validationErrors();\r\n\r\n        if (errors) {\r\n            errors = _.first(errors);\r\n            let errValidation = {\r\n                code: 400,\r\n                message: errors.msg\r\n            };\r\n            return next(errValidation);\r\n        }\r\n\r\n        let { competetionName, competetionDescription, competetionGameName, competetionLocation, competetionEntryFees, competetionDate, isDone } = req.body;\r\n\r\n        try {\r\n\r\n            let newCompetetion = new Competetion ({\r\n                name: competetionName,\r\n                description: competetionDescription,\r\n                gameName: competetionGameName,\r\n                location: competetionLocation,\r\n                entryFees: competetionEntryFees,\r\n                date: competetionDate,\r\n                isDone: isDone\r\n            });\r\n    \r\n            console.log(newCompetetion);\r\n    \r\n            // Check post if already Exist\r\n            Competetion.findOne({'name': newCompetetion.name}, async (err, competetion) => {\r\n\r\n                if (err) return res.json({success: false, msg: err});\r\n\r\n                if(competetion) {\r\n                    return res.json({success: false, msg: 'Competetion Already Exist!'});\r\n                } \r\n\r\n                let oCompetetion = await dbMongooseUpload.add(newCompetetion);\r\n\r\n                if(oCompetetion) {\r\n\r\n                    return res.status(200).json({success: true, data: oCompetetion, msg: 'Competetion Added Successfully!'});\r\n\r\n                } else {\r\n                    \r\n                    return res.status(500).json({success: false, msg: 'Something went wrong please try again'});\r\n                }\r\n\r\n            });\r\n\r\n        } catch(e) {\r\n            next(e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /* Get Competetion */\r\n    let getCompetetions = (req, res, next) => {\r\n\r\n        Competetion.find({'isDone': false}, function(err, competetion) {\r\n            if(err) {\r\n                return res.json({success: false, msg: err});\r\n            } else {\r\n                //console.log(competetion);\r\n                return res.status(200).json(competetion);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    return {\r\n        add: add,\r\n        getCompetetions: getCompetetions\r\n    }\r\n}"]}