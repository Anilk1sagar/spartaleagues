{"version":3,"sources":["../../../src/routes/upload/posts.js"],"names":["Post","require","app","router","dbMongooseUpload","add","req","res","next","console","log","body","heading","checkBody","isAscii","errors","validationErrors","_","first","errValidation","code","message","msg","gameName","imgLink","videoLink","description","postModel","toString","toLowerCase","findOne","err","post","json","success","oPost","status","data","e","getCsgoPosts","options","sort","updated_date","lean","offset","Number","params","limit","paginate","then","posts","getBadmintonPosts","getSinglePost","addPosts"],"mappings":"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","file":"posts.js","sourcesContent":["import Router from 'express';\r\nimport _ from 'lodash';\r\n\r\nimport { DbMongooseUpload } from './../../mongoose/interface';\r\nconst Post = require('../../mongoose/models/post');\r\n\r\n\r\nexport default (app) => {\r\n\r\n    let router = Router();\r\n\r\n    let dbMongooseUpload = DbMongooseUpload(app);\r\n\r\n\r\n    /**\r\n    * \r\n    * @param {Request} req \r\n    * @param {Response} res \r\n    * @param {*} next \r\n    */\r\n\r\n    \r\n    /* Add Posts */\r\n    let add = async (req, res, next) => {\r\n\r\n        console.log(req.body.heading);\r\n\r\n        req.checkBody('gameName', 'gameName is Required').isAscii();\r\n        req.checkBody('heading', 'Heading is Required').isAscii();\r\n        req.checkBody('description', 'Description is Required').isAscii();\r\n\r\n        var errors = await req.validationErrors();\r\n\r\n        if (errors) {\r\n            errors = _.first(errors);\r\n            let errValidation = {\r\n                code: 400,\r\n                message: errors.msg\r\n            };\r\n\r\n            return next(errValidation);\r\n        }\r\n\r\n        let { gameName, heading, imgLink, videoLink, description } = req.body;\r\n\r\n        try {\r\n\r\n            let postModel = new Post({\r\n                gameName: gameName,\r\n                heading: heading.toString().toLowerCase(),\r\n                imgLink: imgLink,\r\n                videoLink: videoLink,\r\n                description: description\r\n            });\r\n    \r\n            // Check post if already Exist\r\n            Post.findOne({'heading': postModel.heading}, async (err, post)=> {\r\n\r\n                if (err) return res.json({success: false, msg: err});\r\n\r\n                if(post) {\r\n                    return res.json({success: false, msg: 'Post Already Exist!'});\r\n                }\r\n\r\n                let oPost = await dbMongooseUpload.add(postModel);\r\n\r\n                if(oPost) {\r\n                    return res.status(200).json({success: true, data: oPost, msg: 'Post Added Successfully!'});\r\n                } else {\r\n                    return res.status(500).json({success: false, msg: 'Something went wrong please try again'});\r\n                }\r\n\r\n            });\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n            \r\n    }\r\n\r\n\r\n\r\n    /* Get All Csgo Posts */\r\n    let getCsgoPosts = async (req, res, next) => {\r\n\r\n        var options = {\r\n            sort: { updated_date: -1 },\r\n            lean: true,\r\n            offset: Number(req.params.offset),\r\n            limit: 8\r\n        };\r\n\r\n        Post.paginate({'gameName': 'CS:GO'}, options).then(function(posts) {\r\n            return res.status(200).json(posts);\r\n        });\r\n    }\r\n\r\n\r\n    /* Get All Badminton Posts */\r\n    let getBadmintonPosts = async (req, res, next) => {\r\n\r\n        var options = {\r\n            sort: { updated_date: -1 },\r\n            lean: true,\r\n            offset: Number(req.params.offset),\r\n            limit: 8\r\n        };\r\n        // Get Badminton Post\r\n        Post.paginate({'gameName': 'Badminton'}, options).then(function(posts) {\r\n            return res.status(200).json(posts);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /* Get Single post */\r\n    let getSinglePost = async (req, res, next) => {\r\n\r\n        Post.findOne({'heading': req.params.heading}, function(err, post) {\r\n            if(err) {\r\n                return res.json({success: false, msg: err});\r\n            } else {\r\n                return res.status(200).json(post);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        addPosts: add,\r\n        getCsgoPosts: getCsgoPosts,\r\n        getBadmintonPosts: getBadmintonPosts,\r\n        getSinglePost: getSinglePost\r\n    }\r\n}"]}