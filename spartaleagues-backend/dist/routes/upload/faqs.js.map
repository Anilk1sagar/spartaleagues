{"version":3,"sources":["../../../src/routes/upload/faqs.js"],"names":["Faq","require","app","router","dbMongooseUpload","add","req","res","next","console","log","body","checkBody","isAscii","errors","validationErrors","_","first","errValidation","code","message","msg","faqQuestion","faqAns","faqModel","findOne","err","faq","json","success","oFaq","status","data","e","getFaqs","find","exec","faqs","addFaqs"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA,MAAMA,MAAMC,QAAQ,2BAAR,CAAZ;;kBAGgBC,GAAD,IAAS;;AAEpB,QAAIC,SAAS,wBAAb;;AAEA,QAAIC,mBAAmB,iCAAiBF,GAAjB,CAAvB;;AAGA;;;;;;;AAQA;AACA,QAAIG,MAAM,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;;AAEhCC,gBAAQC,GAAR,CAAYJ,IAAIK,IAAhB;;AAEA;AACAL,YAAIM,SAAJ,CAAc,aAAd,EAA6B,yBAA7B,EAAwDC,OAAxD;AACAP,YAAIM,SAAJ,CAAc,QAAd,EAAwB,oBAAxB,EAA8CC,OAA9C;;AAEA,YAAIC,SAAS,MAAMR,IAAIS,gBAAJ,EAAnB;;AAEA,YAAID,MAAJ,EAAY;AACR;AACAA,qBAASE,iBAAEC,KAAF,CAAQH,MAAR,CAAT;AACA,gBAAII,gBAAgB;AAChBC,sBAAM,GADU;AAEhBC,yBAASN,OAAOO;AAFA,aAApB;;AAKA,mBAAOb,KAAKU,aAAL,CAAP;AACA;AACH;;AAED,YAAI,EAAEI,WAAF,EAAeC,MAAf,KAA0BjB,IAAIK,IAAlC;;AAEA,YAAI;;AAEA,gBAAIa,WAAW,IAAIxB,GAAJ,CAAQ;AACnBsB,6BAAaA,WADM;AAEnBC,wBAAQA;AAFW,aAAR,CAAf;;AAKAd,oBAAQC,GAAR,CAAY,aAAZ,EAA2Bc,QAA3B;;AAGAxB,gBAAIyB,OAAJ,CAAY,EAAC,eAAeD,SAASF,WAAzB,EAAZ,EAAmD,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;;AAGnE,oBAAID,GAAJ,EAAS,OAAOnB,IAAIqB,IAAJ,CAAS,EAACC,SAAS,KAAV,EAAiBR,KAAKK,GAAtB,EAAT,CAAP;;AAET,oBAAGC,GAAH,EAAQ;AACJ,2BAAOpB,IAAIqB,IAAJ,CAAS,EAACC,SAAS,KAAV,EAAiBR,KAAK,6BAAtB,EAAT,CAAP;AACH;;AAED,oBAAIS,OAAO,MAAM1B,iBAAiBC,GAAjB,CAAqBmB,QAArB,CAAjB;;AAEA,oBAAGM,IAAH,EAAS;AACL,2BAAOvB,IAAIwB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAACC,SAAS,IAAV,EAAgBG,MAAMF,IAAtB,EAA4BT,KAAK,kCAAjC,EAArB,CAAP;AACH,iBAFD,MAEO;AACH,2BAAOd,IAAIwB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAACC,SAAS,KAAV,EAAiBR,KAAK,uCAAtB,EAArB,CAAP;AACH;AAEJ,aAjBD;AAoBH,SA9BD,CA8BE,OAAOY,CAAP,EAAU;AACRzB,iBAAKyB,CAAL;AACH;AAEJ,KA1DD;;AA8DA;AACA,QAAIC,UAAU,OAAO5B,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;;AAEpCR,YAAImC,IAAJ,CAAS,EAAT,EAAaC,IAAb,CAAkB,UAASV,GAAT,EAAcW,IAAd,EAAoB;AAClC,gBAAGX,GAAH,EAAQ;AACJ,uBAAOnB,IAAIqB,IAAJ,CAAS,EAACC,SAAS,KAAV,EAAiBR,KAAKK,GAAtB,EAAT,CAAP;AACH,aAFD,MAEO;AACH,uBAAOnB,IAAIwB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBS,IAArB,CAAP;AACH;AACJ,SAND;AAOH,KATD;;AAaA,WAAO;AACHC,iBAASjC,GADN;AAEH6B,iBAASA;AAFN,KAAP;AAIH,C","file":"faqs.js","sourcesContent":["import Router from 'express';\r\nimport _ from 'lodash';\r\n\r\nimport { DbMongooseUpload } from './../../mongoose/interface';\r\nconst Faq = require('../../mongoose/models/faq');\r\n\r\n\r\nexport default (app) => {\r\n\r\n    let router = Router();\r\n\r\n    let dbMongooseUpload = DbMongooseUpload(app);\r\n\r\n\r\n    /**\r\n    * \r\n    * @param {Request} req \r\n    * @param {Response} res \r\n    * @param {*} next \r\n    */\r\n\r\n\r\n    /* Add Faqs */\r\n    let add = async (req, res, next) => {\r\n\r\n        console.log(req.body);\r\n\r\n        // Server Side Validation\r\n        req.checkBody('faqQuestion', 'faqQuestion is Required').isAscii();\r\n        req.checkBody('faqAns', 'faqAns is Required').isAscii();\r\n\r\n        var errors = await req.validationErrors();\r\n\r\n        if (errors) {\r\n            //console.log(errors);\r\n            errors = _.first(errors);\r\n            let errValidation = {\r\n                code: 400,\r\n                message: errors.msg\r\n            };\r\n\r\n            return next(errValidation);\r\n            //res.json({success: false, msg: 'Please fill in all fields!'});\r\n        }\r\n\r\n        let { faqQuestion, faqAns } = req.body;\r\n\r\n        try {\r\n\r\n            let faqModel = new Faq({\r\n                faqQuestion: faqQuestion,\r\n                faqAns: faqAns\r\n            });\r\n    \r\n            console.log(\"Faq Model: \", faqModel);\r\n\r\n\r\n            Faq.findOne({'faqQuestion': faqModel.faqQuestion}, async (err, faq) => {\r\n\r\n\r\n                if (err) return res.json({success: false, msg: err});\r\n                \r\n                if(faq) {\r\n                    return res.json({success: false, msg: 'Faq question Already Exist!'});\r\n                } \r\n\r\n                let oFaq = await dbMongooseUpload.add(faqModel);\r\n\r\n                if(oFaq) {\r\n                    return res.status(200).json({success: true, data: oFaq, msg: 'Faq Question Added Successfully!'});\r\n                } else {\r\n                    return res.status(500).json({success: false, msg: 'Something went wrong please try again'});\r\n                }\r\n\r\n            });\r\n\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n            \r\n    };\r\n\r\n\r\n\r\n    /* Get All Faqs */\r\n    let getFaqs = async (req, res, next) => {\r\n\r\n        Faq.find({}).exec(function(err, faqs) {\r\n            if(err) {\r\n                return res.json({success: false, msg: err});\r\n            } else {\r\n                return res.status(200).json(faqs);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        addFaqs: add,\r\n        getFaqs: getFaqs\r\n    }\r\n}\r\n"]}