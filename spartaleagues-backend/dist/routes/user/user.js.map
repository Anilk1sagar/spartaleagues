{"version":3,"sources":["../../../src/routes/user/user.js"],"names":["User","require","ParticipantUser","app","dbMongooseUser","router","register","req","res","next","checkBody","isAscii","errors","validationErrors","_","first","errValidation","code","message","msg","name","username","email","password","body","userModel","toLowerCase","console","log","oUser","getUserByUsername","json","success","getUserByEmail","user","addUser","status","e","authenticate","isMatch","comparePassword","token","jwt","sign","toJSON","config","secret","expiresIn","id","_id","city","phone","gameRank","steamProfile","imgLink","coverImgLink","update_password","updateUser","profile","getUserById","publicUserProfile","params","ouser","searchUsers","search","searchUser","getParticipantUser","getTeams","find","err","send"],"mappings":"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","file":"user.js","sourcesContent":["import _ from 'lodash';\r\nimport Express from 'express';\r\nimport Router from 'express';\r\nimport nodemailer from 'nodemailer';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport { DbMongooseUser } from './../../mongoose/interface';\r\nimport config from '../../configDb/database';\r\n\r\n//Models\r\nconst User = require('./../../mongoose/models/user');\r\nconst ParticipantUser = require('./../../mongoose/models/participantsUser');\r\n\r\n\r\nexport default (app) => {\r\n\r\n    let dbMongooseUser = DbMongooseUser(app);\r\n\r\n    let router = Router();\r\n\r\n\r\n\r\n    /**\r\n   * \r\n   * @param {Request} req \r\n   * @param {Response} res \r\n   * @param {*} next \r\n   */\r\n    /* Register User */\r\n    let register = async (req, res, next) => {\r\n\r\n        // Server Side Validation\r\n        req.checkBody('name', 'Name is Required').isAscii();\r\n        req.checkBody('username', 'Username is Required').isAscii();\r\n        req.checkBody('email', 'Email is Required').isAscii();\r\n        req.checkBody('password', 'Password is Required').isAscii();\r\n\r\n        var errors = await req.validationErrors();\r\n\r\n        if (errors) {\r\n            //console.log(errors);\r\n            errors = _.first(errors);\r\n            let errValidation = {\r\n                code: 400,\r\n                message: errors.msg\r\n            };\r\n\r\n            return next(errValidation);\r\n            //res.json({success: false, msg: 'Please fill in all fields!'});\r\n        }\r\n\r\n        let { name, username, email, password } = req.body;\r\n\r\n        try {\r\n\r\n            let userModel = new User({\r\n                name: name,\r\n                username: username.toLowerCase(),\r\n                email: email.toLowerCase(),\r\n                password: password\r\n            });\r\n    \r\n            console.log(\"User Model: \", userModel);\r\n\r\n\r\n            /* Check Username */\r\n            let oUser = await dbMongooseUser.getUserByUsername(userModel.username);\r\n\r\n            if(oUser) {\r\n                return res.json({success: false, msg: 'Username Already Exist!'});\r\n            }\r\n\r\n            /* Check Email */\r\n            oUser = await dbMongooseUser.getUserByEmail(userModel.email);\r\n\r\n            if(oUser) {\r\n                return res.json({success: false, msg: 'Email Already Exist!'});\r\n            }\r\n\r\n\r\n            // Add User ()\r\n            let user = await dbMongooseUser.addUser(userModel);\r\n\r\n            //console.log(user);\r\n\r\n            if(user) {\r\n                return res.status(200).json({success: true, msg: 'User Registered Successfully!'});\r\n            } else {\r\n                return res.status(500).json({success: false, msg: 'Something went wrong please try again'});\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n            \r\n    };\r\n\r\n\r\n\r\n    /* Authenticate User */\r\n    let authenticate = async (req, res, next) => {\r\n\r\n        console.log(req.body);\r\n\r\n        // Server Side Validation\r\n        req.checkBody('email', 'Email is Required').isAscii();\r\n        req.checkBody('password', 'Password is Required').isAscii();\r\n\r\n        var errors = await req.validationErrors();\r\n\r\n        if (errors) {\r\n            //console.log(errors);\r\n            errors = _.first(errors);\r\n            let errValidation = {\r\n                code: 400,\r\n                message: errors.msg\r\n            };\r\n\r\n            return next(errValidation);\r\n            //res.json({success: false, msg: 'Please fill in all fields!'});\r\n        }\r\n\r\n        let { email, password } = req.body;\r\n\r\n        email = email.toLowerCase();\r\n\r\n        try {\r\n\r\n            //Check User Email\r\n            let user = await dbMongooseUser.getUserByEmail(email);\r\n\r\n            if(user) {\r\n\r\n                let isMatch = await dbMongooseUser.comparePassword(password, user.password);\r\n\r\n                if(isMatch) {\r\n                    \r\n                    const token = jwt.sign(user.toJSON(), config.secret, {\r\n                        expiresIn: 604800 // 1 Week\r\n                    });\r\n\r\n                    return res.status(200).json({\r\n                        success: true,\r\n                        token: 'JWT '+token,\r\n                        user: {\r\n                            id: user._id,\r\n                            name: user.name,\r\n                            username: user.username,\r\n                            city: user.city,\r\n                            phone: user.phone,\r\n                            gameRank: user.gameRank,\r\n                            steamProfile: user.steamProfile,\r\n                            imgLink: user.imgLink,\r\n                            coverImgLink: user.coverImgLink,\r\n                            email: user.email\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n\r\n                    return res.status(200).json({success: false, msg: 'Wrong Password'});\r\n                }\r\n            } else {\r\n\r\n                return res.status(404).json({success: false, msg: 'User Not Found!'});\r\n            }\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /* Update User Password */\r\n    let update_password = async (req, res, next) => {\r\n\r\n        let { email } = req.body;\r\n\r\n        try {\r\n\r\n            let userModel = {};\r\n\r\n            if(req.body.password) {\r\n                userModel.password = req.body.password\r\n            }\r\n\r\n            let user = await dbMongooseUser.getUserByEmail(email);\r\n\r\n            if(user) {\r\n\r\n                let oUser = await dbMongooseUser.updateUser(userModel, user._id);\r\n\r\n                if(oUser) {\r\n\r\n                    return res.status(200).json({success: true, msg: 'Password Updated Successfully!'});\r\n                } else {\r\n\r\n                    return res.status(500).json({success: false, msg: 'Something went wrong please try again'});\r\n                }\r\n\r\n            } else {\r\n               return res.status(404).json({success: false, msg: 'User Not Found!'});\r\n            }\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    /* Get User Profile */\r\n    let profile = async (req, res, next) => {\r\n\r\n        try {\r\n\r\n            let user = await dbMongooseUser.getUserById(req.user._id);\r\n\r\n            //console.log(\"From Proilfe: \", user);\r\n\r\n            if(user) {\r\n\r\n                return res.status(200).json(user);\r\n\r\n            } else {\r\n                return res.status(404).json({success: false, msg: 'User Not Found!'});\r\n            }\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    /* Get Public User Profile */\r\n    let publicUserProfile = async (req, res, next) => {\r\n\r\n        let { username } = req.params;\r\n        username = username.toLowerCase();\r\n\r\n        try {\r\n\r\n            let user = await dbMongooseUser.getUserByUsername(username);\r\n\r\n            if(user) {\r\n\r\n                return res.status(200).json(user);\r\n            } else {\r\n\r\n                return res.status(200).json({success: false, msg: 'No User Found!'});\r\n            }\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /* Update User */\r\n    let updateUser = async (req, res, next) => {\r\n\r\n        let { id } = req.params;\r\n\r\n        let { name, username, city, phone, gameRank, steamProfile, imgLink, coverImgLink, email, password } = req.body;\r\n\r\n        try {\r\n\r\n            let user = await dbMongooseUser.getUserById(id);\r\n\r\n            if(!user) { \r\n                return res.status(200).json({success: false, msg: 'No User Found!'});\r\n            }\r\n\r\n            let userModel = {\r\n                name: name,\r\n                username: username,\r\n                city: city,\r\n                phone: phone,\r\n                gameRank: gameRank,\r\n                steamProfile: steamProfile,\r\n                imgLink: imgLink,\r\n                coverImgLink: coverImgLink,\r\n                email: email,\r\n                password: password\r\n            }\r\n            \r\n            //Check Email if Exist\r\n            let oUser = await dbMongooseUser.getUserByEmail(userModel.email);\r\n\r\n            if(oUser) {\r\n                return res.status(200).json({success: false, msg: 'Email Already Exist!'}); \r\n            }\r\n\r\n            //Check Username if Exist\r\n            oUser = await dbMongooseUser.getUserByUsername(userModel.username);\r\n\r\n            if(oUser) {\r\n                return res.status(200).json({success: false, msg: 'Username Already Exist!'});\r\n            }\r\n\r\n            console.log(\"User=>>>>>>>>>>>\", oUser);\r\n\r\n            //Update User\r\n            let ouser = await dbMongooseUser.updateUser(userModel, id);\r\n\r\n            if(ouser) {\r\n\r\n                return res.status(200).json({success: true, msg: 'User Updated Successfully!'});\r\n            } else {\r\n\r\n                return res.status(500).json({success: false, msg: 'Something went wrong please try again'});\r\n            }\r\n  \r\n\r\n        } catch(e) {\r\n            next(e);\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    /* Search Users */\r\n    let searchUsers = async (req, res, next) => {\r\n\r\n        let gameRank = req.body.search;\r\n\r\n        console.log(gameRank);\r\n\r\n        try {\r\n            \r\n            let user = await dbMongooseUser.searchUser(gameRank);\r\n\r\n            if(user) {\r\n                return res.status(200).json(user);\r\n\r\n            } else {\r\n                return res.status(404).json({success: false, msg: 'Users Not Found!'});\r\n            }\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    /* Get Participant User status data */\r\n    let getParticipantUser = async (req, res, next) => {\r\n\r\n        let { email } = req.params;\r\n        email = email.toLowerCase();\r\n\r\n        console.log(email);\r\n\r\n\r\n        try {\r\n            \r\n            let user = await dbMongooseUser.getParticipantUser(email);\r\n\r\n            if(user) {\r\n                return res.status(200).json(user);\r\n\r\n            } else {\r\n                return res.status(404).json({success: false, msg: 'User Not Found!'});\r\n            }\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /* Get Teams */\r\n    let getTeams = async (req, res, next) => {\r\n\r\n        try {\r\n\r\n            ParticipantUser.find({}, (err, user) => {\r\n\r\n                if (err) return res.status(500).send(\"There was a problem finding the Teams.\");\r\n\r\n                if(user) {\r\n\r\n                    return res.status(200).json(user);\r\n                } \r\n                else {\r\n\r\n                    return res.status(404).json({success: false, msg: 'Teams Not Found!'});\r\n                }\r\n            });\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        register: register,\r\n        authenticate: authenticate,\r\n        update_password: update_password,\r\n        profile: profile,\r\n        publicUserProfile: publicUserProfile,\r\n        updateUser: updateUser,\r\n        searchUsers: searchUsers,\r\n        getParticipantUser: getParticipantUser,\r\n        getTeams: getTeams\r\n    }\r\n\r\n}"]}