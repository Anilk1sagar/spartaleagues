{"version":3,"sources":["../../../src/routes/sendEmail/send.js"],"names":["User","require","router","interfaceDbModel_User","transporter","nodemailer","createTransport","host","port","secure","auth","user","pass","tls","rejectUnauthorized","contact","req","res","next","console","log","body","name","email","message","output","mailOptions","from","to","subject","html","sendMail","error","info","status","json","success","msg","resetPassword","toLowerCase","findOne","err","password","substring","sendTeamInvite","gameRank","steamProfile","toEmail","paymentInvoice","payment_id","txnId","emails","amount","competetionName","maillist","toString"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;;;AANA,MAAMA,OAAOC,QAAS,8BAAT,CAAb;;AAEA;;kBAMe,MAAM;;AAEjB,QAAIC,SAAS,wBAAb;;AAEA,QAAIC,wBAAwBH,IAA5B;;AAGA;AACA;AACA,QAAII,cAAcC,qBAAWC,eAAX,CAA2B;AACzCC,cAAM,gBADmC;AAEzCC,cAAM,GAFmC;AAGzCC,gBAAQ,IAHiC,EAG3B;AACdC,cAAM;AACFC,kBAAM,yBADJ,EAC+B;AACjCC,kBAAM,cAFJ,CAEoB;AAFpB,SAJmC;AAQzCC,aAAK;AACDC,gCAAoB;AADnB;AARoC,KAA3B,CAAlB;;AAcA;AACA,QAAIC,UAAU,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;;AAEpCC,gBAAQC,GAAR,CAAYJ,IAAIK,IAAhB;;AAEA,YAAI,EAAEC,IAAF,EAAQC,KAAR,EAAeC,OAAf,KAA2BR,IAAIK,IAAnC;;AAEA,cAAMI,SAAS,MAAM,uBAAYH,IAAZ,EAAkBC,KAAlB,EAAyBC,OAAzB,CAArB;;AAEA;AACA,YAAIE,cAAc;AACdC,kBAAM,+CADQ,EACyC;AACvDC,gBAAI,yBAFU,EAEiB;AAC/BC,qBAAS,+BAHK,EAG4B;AAC1C;AACAC,kBAAML,MALQ,CAKD;AALC,SAAlB;;AAQA;AACArB,oBAAY2B,QAAZ,CAAqBL,WAArB,EAAkC,CAACM,KAAD,EAAQC,IAAR,KAAiB;;AAE/C,gBAAGD,KAAH,EAAU;;AAENb,wBAAQC,GAAR,CAAYY,KAAZ;;AAEA,uBAAOf,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,KAAV,EAAiBC,KAAK,sCAAtB,EAArB,CAAP;AACH,aALD,MAKO;;AAEH,uBAAOpB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,IAAV,EAAgBC,KAAK,0CAArB,EAArB,CAAP;AACH;AACJ,SAXD;AAYH,KA9BD;;AAkCA;AACA,QAAIC,gBAAgB,OAAOtB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;;AAE1CC,gBAAQC,GAAR,CAAYJ,IAAIK,IAAhB;;AAEA,YAAIE,QAAQP,IAAIK,IAAJ,CAASE,KAAT,CAAegB,WAAf,EAAZ;;AAGApC,8BAAsBqC,OAAtB,CAA8B,EAAC,SAASjB,KAAV,EAA9B,EAAgD,OAAOkB,GAAP,EAAY9B,IAAZ,KAAqB;;AAEjE,gBAAGA,IAAH,EAAS;;AAEL,oBAAI+B,WAAW/B,KAAK+B,QAAL,CAAcC,SAAd,CAAwB,CAAxB,EAA2B,EAA3B,CAAf;;AAEA,sBAAMlB,SAAS,MAAM,6BAAcF,KAAd,EAAqBmB,QAArB,CAArB;;AAEA;AACA,oBAAIhB,cAAc;AACdC,0BAAM,6CADQ,EACuC;AACrDC,wBAAIL,KAFU,EAEH;AACXM,6BAAS,4BAHK,EAGyB;AACvCC,0BAAML,MAJQ,CAID;AAJC,iBAAlB;;AAOA;AACArB,4BAAY2B,QAAZ,CAAqBL,WAArB,EAAkC,CAACM,KAAD,EAAQC,IAAR,KAAiB;;AAE/C,wBAAGD,KAAH,EAAU;;AAENb,gCAAQC,GAAR,CAAYY,KAAZ;;AAEA,+BAAOf,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,KAAV,EAAiBC,KAAK,sCAAtB,EAArB,CAAP;AACH,qBALD,MAKO;;AAEH,+BAAOpB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,IAAV,EAAgBC,KAAK,0CAArB,EAArB,CAAP;AACH;AACJ,iBAXD;AAYH,aA3BD,MA2BO;AACHpB,oBAAIkB,IAAJ,CAAS,EAACC,SAAS,KAAV,EAAiBC,KAAK,uBAAtB,EAAT;AACH;AACJ,SAhCD;AAiCH,KAxCD;;AA4CA;AACA,QAAIO,iBAAiB,OAAO5B,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;;AAE3C,YAAI,EAAEI,IAAF,EAAQC,KAAR,EAAesB,QAAf,EAAyBC,YAAzB,KAA0C9B,IAAIK,IAAlD;;AAEA,YAAI0B,UAAU/B,IAAIK,IAAJ,CAAS0B,OAAT,CAAiBR,WAAjB,EAAd;;AAEA,YAAId,SAAS,MAAM,0BAAWH,IAAX,EAAiBC,KAAjB,EAAwBsB,QAAxB,EAAkCC,YAAlC,CAAnB;;AAEA;AACA,YAAIpB,cAAc;AACdC,kBAAM,6CADQ,EACuC;AACrDC,gBAAImB,OAFU,EAED;AACblB,qBAAS,iBAHK,EAGc;AAC5BC,kBAAML,MAJQ,CAID;AAJC,SAAlB;;AAOA;AACArB,oBAAY2B,QAAZ,CAAqBL,WAArB,EAAkC,CAACM,KAAD,EAAQC,IAAR,KAAiB;AAC/C,gBAAGD,KAAH,EAAU;;AAENb,wBAAQC,GAAR,CAAYY,KAAZ;;AAEA,uBAAOf,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,KAAV,EAAiBC,KAAK,sCAAtB,EAArB,CAAP;AACH,aALD,MAKO;;AAEH,uBAAOpB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,IAAV,EAAgBC,KAAK,0CAArB,EAArB,CAAP;AACH;AACJ,SAVD;AAWH,KA5BD;;AA+BA;AACA,QAAIW,iBAAiB,OAAOhC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;;AAE3CC,gBAAQC,GAAR,CAAYJ,IAAIK,IAAhB;;AAEA,YAAI,EAAE4B,UAAF,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,eAArC,KAAyDrC,IAAIK,IAAjE;;AAGA,YAAIiC,WAAWH,MAAf;;AAEAhC,gBAAQC,GAAR,CAAY,aAAZ,EAA0BkC,QAA1B;;AAEAA,iBAASC,QAAT;;AAEA,cAAM9B,SAAS,MAAM,8BAAewB,UAAf,EAA2BC,KAA3B,EAAkCE,MAAlC,EAA0CC,eAA1C,CAArB;;AAGA;AACA,YAAI3B,cAAc;AACdC,kBAAM,6CADQ,EACuC;AACrDC,gBAAI0B,QAFU,EAEA;AACdzB,qBAAS,iBAHK,EAGc;AAC5BC,kBAAML,MAJQ,CAID;AAJC,SAAlB;;AAOA;AACArB,oBAAY2B,QAAZ,CAAqBL,WAArB,EAAkC,CAACM,KAAD,EAAQC,IAAR,KAAiB;AAC/C,gBAAGD,KAAH,EAAU;;AAENb,wBAAQC,GAAR,CAAYY,KAAZ;;AAEA,uBAAOf,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,KAAV,EAAiBC,KAAK,sCAAtB,EAArB,CAAP;AACH,aALD,MAKO;;AAEH,uBAAOpB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,IAAV,EAAgBC,KAAK,0CAArB,EAArB,CAAP;AACH;AACJ,SAVD;AAWH,KApCD;;AAwCA,WAAO;AACHtB,iBAASA,OADN;AAEHuB,uBAAeA,aAFZ;AAGHM,wBAAgBA,cAHb;AAIHI,wBAAgBA;AAJb,KAAP;AAMH,C","file":"send.js","sourcesContent":["import Router from 'express';\r\nimport nodemailer from 'nodemailer';\r\n\r\nconst User = require ('./../../mongoose/models/user');\r\n\r\n//Templates\r\nimport ContactBody from './templates/contact';\r\nimport ResetPassword from './templates/resetPassword';\r\nimport TeamInvite from './templates/teamInvite';\r\nimport PaymentInvoice from './templates/paymentInvoice';\r\n\r\nexport default () => {\r\n\r\n    let router = Router();\r\n\r\n    let interfaceDbModel_User = User;\r\n\r\n\r\n    // Nodemailer Code\r\n    // create reusable transporter object using the default SMTP transport\r\n    let transporter = nodemailer.createTransport({\r\n        host: 'smtp.gmail.com',\r\n        port: 465,\r\n        secure: true, // true for 465, false for other ports\r\n        auth: {\r\n            user: 'Spartaleagues@gmail.com', // generated ethereal user\r\n            pass: 'Friction!123'  // generated ethereal password\r\n        },\r\n        tls: {\r\n            rejectUnauthorized: false\r\n        }\r\n    });\r\n\r\n\r\n    /* Send Contact */\r\n    let contact = async (req, res, next) => {\r\n\r\n        console.log(req.body);\r\n\r\n        let { name, email, message } = req.body;\r\n        \r\n        const output = await ContactBody(name, email, message);\r\n\r\n        // setup email data with unicode symbols\r\n        let mailOptions = {\r\n            from: '\"SpartaLeagues Contact\" <contact@esparta.com>', // sender address\r\n            to: 'Spartaleagues@gmail.com', // list of receivers\r\n            subject: 'Spartaleagues Contact Request', // Subject line\r\n            //text: 'Hello world?', // plain text body\r\n            html: output // html body\r\n        };\r\n\r\n        // send mail with defined transport object\r\n        transporter.sendMail(mailOptions, (error, info) => {\r\n            \r\n            if(error) {\r\n\r\n                console.log(error);\r\n\r\n                return res.status(500).json({success: false, msg: 'Some error occured please try again!'});\r\n            } else {\r\n\r\n                return res.status(200).json({success: true, msg: 'Your message has been sent successfully!'});\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /* Reset User Password */\r\n    let resetPassword = async (req, res, next) => {\r\n        \r\n        console.log(req.body);\r\n\r\n        let email = req.body.email.toLowerCase();\r\n        \r\n\r\n        interfaceDbModel_User.findOne({'email': email}, async (err, user) => {\r\n\r\n            if(user) {\r\n\r\n                let password = user.password.substring(0, 15);\r\n                \r\n                const output = await ResetPassword(email, password);\r\n              \r\n                // setup email data with unicode symbols\r\n                let mailOptions = {\r\n                    from: '\"SpartaLeagues\" <noreply@spartaleagues.com>', // sender address\r\n                    to: email, // list of receivers\r\n                    subject: 'Please reset your password', // Subject line\r\n                    html: output // html body\r\n                };\r\n\r\n                // send mail with defined transport object\r\n                transporter.sendMail(mailOptions, (error, info) => {\r\n\r\n                    if(error) {\r\n\r\n                        console.log(error);\r\n                        \r\n                        return res.status(500).json({success: false, msg: 'Some error occured please try again!'});\r\n                    } else {\r\n\r\n                        return res.status(200).json({success: true, msg: 'Your message has been sent successfully!'});\r\n                    }\r\n                });\r\n            } else {\r\n                res.json({success: false, msg: 'Email does not exist!'});\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n\r\n    /* Send Team Invte */\r\n    let sendTeamInvite = async (req, res, next) => {\r\n\r\n        let { name, email, gameRank, steamProfile } = req.body;\r\n        \r\n        let toEmail = req.body.toEmail.toLowerCase();\r\n\r\n        let output = await TeamInvite(name, email, gameRank, steamProfile);\r\n\r\n        // setup email data with unicode symbols\r\n        let mailOptions = {\r\n            from: '\"SpartaLeagues\" <noreply@spartaleagues.com>', // sender address\r\n            to: toEmail, // list of receivers\r\n            subject: 'Team Invitation', // Subject line\r\n            html: output // html body\r\n        };\r\n\r\n        // send mail with defined transport object\r\n        transporter.sendMail(mailOptions, (error, info) => {\r\n            if(error) {\r\n\r\n                console.log(error);\r\n                \r\n                return res.status(500).json({success: false, msg: 'Some error occured please try again!'});\r\n            } else {\r\n\r\n                return res.status(200).json({success: true, msg: 'Your message has been sent successfully!'});\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /* Send Payment Invoice */\r\n    let paymentInvoice = async (req, res, next) => {\r\n\r\n        console.log(req.body);\r\n\r\n        let { payment_id, txnId, emails, amount, competetionName } = req.body;\r\n\r\n\r\n        var maillist = emails;\r\n\r\n        console.log(\"Mail List: \",maillist);\r\n\r\n        maillist.toString();\r\n\r\n        const output = await PaymentInvoice(payment_id, txnId, amount, competetionName);\r\n\r\n\r\n        // setup email data with unicode symbols\r\n        let mailOptions = {\r\n            from: '\"SpartaLeagues\" <noreply@spartaleagues.com>', // sender address\r\n            to: maillist, // list of receivers\r\n            subject: 'Payment Invoice', // Subject line\r\n            html: output // html body\r\n        };\r\n\r\n        // send mail with defined transport object\r\n        transporter.sendMail(mailOptions, (error, info) => {\r\n            if(error) {\r\n\r\n                console.log(error);\r\n                \r\n                return res.status(500).json({success: false, msg: 'Some error occured please try again!'});\r\n            } else {\r\n\r\n                return res.status(200).json({success: true, msg: 'Your message has been sent successfully!'});\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        contact: contact,\r\n        resetPassword: resetPassword,\r\n        sendTeamInvite: sendTeamInvite,\r\n        paymentInvoice: paymentInvoice,\r\n    }\r\n}\r\n"]}