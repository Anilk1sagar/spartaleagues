{"version":3,"sources":["../../../src/routes/payment/payments.js"],"names":["ParticipantUser","require","app","router","dbMongooseUser","createHash","req","res","next","preHashString","body","salt","hash","console","log","status","json","success","e","paymentStatus","payuMoneyId","txnid","redirect","checkTeamName","teamName","findOne","err","user","msg","addUser","mode","competetionName","competetionDate","gameName","payment_id","txnId","contact","emails","userModel","oUser","data"],"mappings":"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","file":"payments.js","sourcesContent":["import express from 'express';\r\nimport Router from 'express';\r\nimport sha512 from 'js-sha512';\r\n\r\nimport { DbMongooseUser } from './../../mongoose/interface';\r\nconst ParticipantUser = require('../../mongoose/models/participantsUser');\r\n\r\n\r\nexport default (app) => {\r\n\r\n    let router = Router();\r\n    let dbMongooseUser = DbMongooseUser(app);\r\n\r\n\r\n    /* Create has for payment */\r\n    let createHash = async (req, res, next) => {\r\n\r\n        //Test Salt = eCwWELxi\r\n        //Prod Salt = tg7QDUiyCl\r\n\r\n        let { preHashString } = req.body;\r\n\r\n        try {\r\n\r\n            const salt = 'eCwWELxi';\r\n            const hash = sha512(preHashString + salt);\r\n            console.log(\"Hash: \" + hash);\r\n\r\n            return res.status(200).json({success : true, hash: hash});\r\n\r\n        } catch(e) {\r\n            next(e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /* Payment Status */\r\n    let paymentStatus = async (req, res, next) => {\r\n\r\n        //Test = res.redirect('http://localhost:4200/payment-status/'+req.body.status+'/'+req.body.payuMoneyId+'/'+req.body.txnid);\r\n\r\n        //Prod = res.redirect('https://www.spartaleagues.com/payment-status/'+req.body.status+'/'+req.body.payuMoneyId+'/'+req.body.txnid);\r\n\r\n        console.log(req.body);\r\n\r\n        let { status, payuMoneyId, txnid } = req.body;\r\n        \r\n        try {\r\n\r\n            if(status == 'success') {\r\n                \r\n                return res.redirect('http://localhost:4200/payment-status/'+status+'/'+payuMoneyId+'/'+txnid);\r\n\r\n            } else {\r\n    \r\n                return res.redirect('http://localhost:4200/payment-status/'+status+'/'+payuMoneyId+'/'+txnid);\r\n            }\r\n\r\n        } catch(e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n\r\n    /* Check Team Name Availability */\r\n    let checkTeamName = async (req, res, next) => {\r\n\r\n        let { teamName } = req.body;\r\n\r\n        try {\r\n\r\n            // Check Email If Exist\r\n            ParticipantUser.findOne({'teamName': teamName}, (err, user) => {\r\n\r\n                if (err) return res.json({success: false, msg: err});\r\n\r\n                if(user) {\r\n                    return res.json({success: false, msg: 'Team Name Already Exist!'});\r\n                } else {\r\n                    return res.status(200).json({success: true, msg: 'Team Name Available!'});\r\n                }\r\n            });\r\n\r\n        } catch(e) {\r\n            next(e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /* Add Participant Usser */\r\n    let addUser = async (req, res, next) => {\r\n\r\n        let { mode, competetionName, competetionDate, gameName, payment_id, txnId, teamName, contact, emails  } = req.body;\r\n\r\n        try {\r\n\r\n            let userModel = new ParticipantUser({\r\n                mode: mode,\r\n                competetionName: competetionName,\r\n                competetionDate: competetionDate,\r\n                gameName: gameName,\r\n                payment_id: payment_id,\r\n                txnId: txnId,\r\n                teamName: teamName,\r\n                contact: contact,\r\n                emails: emails\r\n            });\r\n    \r\n            console.log(userModel);\r\n    \r\n            // Calling addPost Function to store Post in Database\r\n            ParticipantUser.findOne({'teamName': userModel.teamName}, async (err, user) => {\r\n    \r\n                if (err) return res.json({success: false, msg: err});\r\n    \r\n                if(user) {\r\n                    return res.json({success: false, msg: 'User Already Added!'});\r\n                }\r\n    \r\n                // Add User ()\r\n                let oUser  = await dbMongooseUser.addUser(userModel);\r\n    \r\n                //console.log(oUser);\r\n    \r\n                if(oUser) {\r\n                    return res.status(200).json({success: true, data: oUser, msg: 'Payment done successfully! & status updated!'});\r\n                } else {\r\n                    return res.status(500).json({success: false, msg: 'Something went wrong please try again'});\r\n                }\r\n    \r\n            });\r\n\r\n        } catch(e) {\r\n            next(e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return {\r\n        createHash: createHash,\r\n        paymentStatus: paymentStatus,\r\n        checkTeamName: checkTeamName,\r\n        addUser: addUser\r\n    }\r\n}\r\n\r\n"]}