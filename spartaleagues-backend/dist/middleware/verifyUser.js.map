{"version":3,"sources":["../../src/middleware/verifyUser.js"],"names":["app","verify","req","res","next","console","log","headers","token","status","send","success","message","jwt","config","secret","err","decoded","userId","_id","verifyUser"],"mappings":";;;;;;AACA;;;;AAEA;;;;AAGA;;;;AACA;;;;;;AAEA;;;;;kBAKgBA,GAAD,IAAS;;AAEpB;;;;;;;AAQA,QAAIC,SAAS,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;;AAEnCC,gBAAQC,GAAR,CAAY,mBAAZ,EAAiCJ,IAAIK,OAArC;;AAEA,YAAIC,QAAQN,IAAIK,OAAJ,CAAY,eAAZ,CAAZ;;AAEAF,gBAAQC,GAAR,CAAY,SAAZ,EAAuBE,KAAvB;;AAEA,YAAI,CAACA,KAAL,EACA,OAAOL,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,oBAA3B,EAArB,CAAP;;AAEAC,+BAAIZ,MAAJ,CAAWO,KAAX,EAAkBM,mBAAOC,MAAzB,EAAiC,UAASC,GAAT,EAAcC,OAAd,EAAuB;;AAEpD,gBAAID,GAAJ,EAAS;AACL,uBAAOb,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,+BAA3B,EAArB,CAAP;AACH;;AAEDP,oBAAQC,GAAR,CAAY,WAAZ,EAAyBW,OAAzB;;AAEA;AACAf,gBAAIgB,MAAJ,GAAaD,QAAQE,GAArB;;AAEAf;AACH,SAZD;AAcH,KAzBD;;AA2BA,WAAO;AACHgB,oBAAYnB;AADT,KAAP;AAIH,C,EAvDD","file":"verifyUser.js","sourcesContent":["//Authorization\r\nimport _ from 'lodash';\r\n\r\nimport Express from 'express';\r\nimport { Request, Response } from 'express';\r\n\r\nimport jwt from 'jsonwebtoken';\r\nimport config  from './../configDb/database';\r\n\r\n/**\r\n * Queries a Baz for items.\r\n * @param {Express} app Subgroup id to query.\r\n */\r\n\r\nexport default (app) => {\r\n    \r\n    /**\r\n     * Express middleware function\r\n     * @param {Request} req \r\n     * @param {Response} res \r\n     * @param {function} next \r\n     */\r\n\r\n    \r\n    let verify = async (req, res, next) => {\r\n\r\n        console.log(\"Request Headers: \", req.headers);\r\n\r\n        var token = req.headers['authorization'];\r\n\r\n        console.log(\"Token: \", token);\r\n\r\n        if (!token)\r\n        return res.status(403).send({ success: false, message: 'No token provided.' });\r\n\r\n        jwt.verify(token, config.secret, function(err, decoded) {\r\n\r\n            if (err) {\r\n                return res.status(500).send({ success: false, message: 'Failed to authenticate token.' });\r\n            }\r\n\r\n            console.log(\"Decoded :\", decoded);\r\n\r\n            // if everything good, save to request for use in other routes\r\n            req.userId = decoded._id;\r\n\r\n            next();\r\n        });\r\n\r\n    }\r\n\r\n    return {\r\n        verifyUser: verify\r\n    }\r\n\r\n}"]}